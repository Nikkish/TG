import telebot
import sqlite3
import os
import random
import webbrowser
from telebot import types
from telebot.types import InputMediaPhoto

# from aiogram.types import Message
# from telegram import InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import Updater, CommandHandler, CallbackQueryHandler

TOKEN = 'rtrtrtrtrtrtrtrtrtrt'

bot = telebot.TeleBot(TOKEN)
CHAT_ID = 'YOUR_CHAT_ID'

conn = sqlite3.connect('BD//DataBot.db', check_same_thread=False)
cursor = conn.cursor()


def get_posts():
    with conn:
        cursor.execute("SELECT * FROM MailingSale")
        print(cursor.fetchall())
        cursor.execute("SELECT * FROM RootUsers")
        print(cursor.fetchall())
        cursor.execute(
            'select Contract.contact_number, Demand.FIO, Demand.address, Type_pay.Pay, Contract.sum, Executor.FIO, Status_work.status from Contract join Type_pay on Contract.id_type_pay = Type_pay.id join Status_work on Contract.id_status = Status_work.id join Demand on Contract.contact_number = Demand.contract_number join Executor on Executor.id = Demand.id_executor where Contract.contact_number == 12345').fetchall()
        print(cursor.fetchall())


get_posts()


@bot.message_handler(commands=['start'])
def start_menu(message):
    markup = types.ReplyKeyboardMarkup()
    btnsite = types.KeyboardButton('–û –∫–æ–º–ø–∞–Ω–∏–∏')
    markup.row(btnsite)
    btnprs = types.KeyboardButton('–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏ üóí')
    markup.row(btnprs)
    btnstatus = types.KeyboardButton('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
    markup.row(btnstatus)
    btnsrc = types.KeyboardButton('–ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü—É–∏–π üö®')
    markup.row(btnsrc)
    btn_support = types.KeyboardButton('–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º')
    markup.row(btn_support)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!' \
                                      '–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –±–∞–ª–∫–æ–Ω–æ–≤. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å? !', reply_markup=markup)
    # bot.register_next_step_handler(message, on_click)


@bot.message_handler(commands=['root_user'])
def admin_user(message):
    us_id = message.chat.id
    user = cursor.execute('SELECT * FROM RootUsers WHERE user_id=%d' % us_id).fetchall()
    if user:
        markup = types.ReplyKeyboardMarkup()
        btnsite = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑')
        markup.row(btnsite)
        btnprs = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑')
        btnsrc = types.KeyboardButton('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞')
        btnstatus = types.KeyboardButton('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
        markup.row(btnprs, btnsrc, btnstatus)
        btnback = types.KeyboardButton('–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btnback)
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, –≤—ã –∑–∞—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"!',
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, –¥–ª—è –≤–∞—Å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!')


# –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ—Ç, –ø–æ—Ç–æ–º –µ—Å–ª–∏ —á—Ç–æ —É–¥–∞–ª—é (–¥–æ–ø –∏–Ω—Ñ–∞)
# @bot.message_handler()
# def on_click(message):
# if message.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
#     webbrowser.open('https://balkon-kld.ru')
# elif message.text == '–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏':
#     bot.send_message(message.chat.id, '<b>–¶–µ–Ω–∞ —É—Å–ª—É–≥:<b/>', parse_mode='html')
# elif message.text == '–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è':
#     bot.send_message(message.chat.id, '<b>–£—Å–ª—É–≥–∏:<b/>', parse_mode='html')

# @bot.message_handler(commands=['switch'])
# def switch(message):
#     markup = types.InlineKeyboardMarkup()
#     switch_button = types.InlineKeyboardButton(text='Try', switch_inline_query="@physicist_agr")
#     markup.add(switch_button)
#     bot.send_message(message.chat.id, "–í—ã–±—Ä–∞—Ç—å —á–∞—Ç", reply_markup=markup)


# @bot.message_handler(commands=['prost'])
# def start(message):
#     markup = types.InlineKeyboardMarkup()
#     buttonA = types.InlineKeyboardButton('A', callback_data='a')
#     buttonB = types.InlineKeyboardButton('B', callback_data='b')
#     buttonC = types.InlineKeyboardButton('C', callback_data='c')
#     markup.row(buttonA, buttonB)
#     markup.row(buttonC)
#     bot.send_message(message.chat.id, 'It works!', reply_markup=markup)

@bot.message_handler(commands=['help'])
def helping_(message):
    try:
        with open('help.txt', 'r', encoding='utf-8') as f:
            help_article = f.read()
            if not help_article:
                bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π!')
            else:
                bot.send_message(message.chat.id, help_article)
    except FileNotFoundError:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π!')


@bot.message_handler(commands=['web', 'site'])
def site(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('Pro Service –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', url='https://balkon-kld.ru')
    markup.add(button1)
    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç', reply_markup=markup)
    webbrowser.open('https://balkon-kld.ru')


@bot.message_handler(commands=['portfolio'])
def site_portfolio(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', url='https://www.balkon-kld.ru/portfolio/')
    markup.add(button1)
    bot.send_message(message.chat.id, '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–º–ø–∞–Ω–∏–∏ Pro Service –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', reply_markup=markup)


@bot.message_handler(commands=['support'])
def technical_support(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url="https://web.telegram.org/a/#678729167")
    keyboard.add(url_button)
    img = open('img//support//woman.jpg', 'rb')
    text = '–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å –ª—é–±—É—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.' \
           '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏, –∏ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞–º —Å–∞–º—ã–π ' \
           '–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ ' \
           '- –≤–∞—à–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—à–∏–º –≥–ª–∞–≤–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.'
    bot.send_photo(message.chat.id, photo=img, caption=text, reply_markup=keyboard)


@bot.message_handler(commands=['id'])
def unique(message):
    bot.send_message(message.chat.id, f'ID: {message.from_user.id}')


# @bot.callback_query_handler(func=lambda call: call.data == 'unsubscribe')
# def callback_query_unsubscribe(call):
#     us_id = call.message.from_user.id
#     db_delete_sale(user_id=us_id)
#     bot.send_message(call.message.chat.id, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!')
#     get_posts()


@bot.callback_query_handler(func=lambda call: call.data == 'unsubscribe')
def callback_query_unsubscribe(message):
    us_id = message.from_user.id
    db_delete_sale(user_id=us_id)
    # message_unsubscribe()
    get_posts()


# def message_unsubscribe(call):
#     bot.send_message(call.message.chat.id, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!')


def db_delete_sale(user_id: str):
    cursor.execute('DELETE FROM MailingSale WHERE user_id = ?', (user_id,))
    conn.commit()
    get_posts()


@bot.message_handler(commands=['sale'])
def sale_mes(message):
    try:
        us_id = message.from_user.id
        us_name = message.from_user.first_name
        us_sname = message.from_user.last_name
        username = message.from_user.username
        db_table_sale(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username)
        bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–∏—Ö –∞–∫—Ü–∏–π!')
    except sqlite3.IntegrityError:
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–∞—à–∏—Ö –ø—Ä–µ–¥–ª–∂–µ–Ω–∏–π', callback_data='unsubscribe')
        keyboard.add(button)
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–∏—Ö –∞–∫—Ü–∏–π!', reply_markup=keyboard)


def db_table_sale(user_id: int, user_name: str, user_surname: str, username: str):
    cursor.execute('INSERT INTO MailingSale (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?)',
                   (user_id, user_name, user_surname, username))
    conn.commit()


def send_multiple_photos(message):
    text = '–í–æ—Ç 10 –Ω–∞—à–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫—Ç–æ–≤!' \
           '–£ –Ω–∞—Å –∏—Ö –±–æ–ª—å—à–µ, —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫—É! '
    path_absolut = 'img//certificates'
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
    file_list = os.listdir(path_absolut)
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .jpg –∏–ª–∏ .png (–∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏)
    photo_list = [file for file in file_list if file.endswith('.jpg') or file.endswith('.png')]
    # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –µ—Å—Ç—å –º–µ–Ω—å—à–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
    if len(photo_list) < 10:
        print("–í –ø–∞–ø–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!")
    else:
        # –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞
        selected_photos = random.sample(photo_list, 10)
    os.chdir('img//certificates')
    media = [InputMediaPhoto(media=open(photo, 'rb'), caption=text) for photo in selected_photos]
    bot.send_media_group(chat_id=message.chat.id, media=media)
    os.chdir('E:/PROGRAMM/BOT')


def find_demand(message):
    try:
        us_text = message.text
        user = cursor.execute(
            'select Contract.contact_number, Demand.FIO, Demand.address, Type_pay.Pay, Contract.sum, Executor.FIO, Status_work.status from Contract join Type_pay on Contract.id_type_pay = Type_pay.id join Status_work on Contract.id_status = Status_work.id join Demand on Contract.contact_number = Demand.contract_number join Executor on Executor.id = Demand.id_executor where Contract.contact_number == %d' % int(
                us_text)).fetchall()
        if user:
            contact = []
        message_text = []
        text = ''
        for per in user:
            contract_dict = {
                '–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:': per[0],
                '–§–ò–û –∑–∞–∫–∞–∑—â–∏–∫–∞:': per[1],
                '–ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏:': per[2],
                '–¢–∏–ø –æ–ø–ª–∞—Ç—ã:': per[3],
                '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:': per[4],
                '–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:': per[5],
                '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:': per[6],
            }
        contact.append(contract_dict)
        print(contract_dict)
        for key, value in contract_dict.items():
            message_text += (key, value)
        print(message_text)
        for item in message_text:
            text += f'{item}\n'
        bot.send_message(message.chat.id, text)
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        btn_replay = types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?', callback_data='replay')
        markup.add(btn_replay)
        bot.send_message(message.chat.id, '–î–æ–≥–æ–≤–æ—Ä —Å–æ—Å—Ç–æ–∏—Ç –∏–º–µ–µ—Ç –∏–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –≤–≤–µ–¥–∏—Ç–∏ —Ç–æ –∏—Ö!', reply_markup=markup)
    except UnboundLocalError:
        markup = types.InlineKeyboardMarkup()
        btn_replay = types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?', callback_data='replay')
        markup.add(btn_replay)
        bot.send_message(message.chat.id, '–£–ø—Å, —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏ —è –Ω–µ –Ω–∞—à–µ–ª!', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'replay')
def find_replay(call: types.CallbackQuery):
    bot.send_message(call.message.chat.id, '–ü—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑!')





@bot.message_handler()
def info(message):
    if message.text.lower() == 'id':
        bot.reply_to(message, f'ID: {message.from_user.id}')
    elif message.text == 'C–∞–π—Ç Pro Service':
        site(message)
    elif message.text == '–û –∫–æ–º–ø–∞–Ω–∏–∏':
        markup = types.ReplyKeyboardMarkup()
        btnsite = types.KeyboardButton('C–∞–π—Ç Pro Service')
        markup.row(btnsite)
        btninf = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏')
        markup.row(btninf)
        btncmp = types.KeyboardButton('–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è?')
        markup.row(btncmp)
        btnportfolio = types.KeyboardButton('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–º–ø–∞–Ω–∏–∏ Pro Service –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥')
        markup.row(btnportfolio)
        btncertificates = types.KeyboardButton('–ù–∞—à–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã')
        markup.row(btncertificates)
        btnback = types.KeyboardButton('–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.row(btnback)
        bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:', reply_markup=markup)
    elif message.text == '–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏ üóí':
        prc_list = cursor.execute('SELECT service, price FROM PriceList').fetchall()
        message_text = ''
        for res in prc_list:
            message_text += '{0} - {1} —Ä—É–±.\n'.format(res[0], res[1])
        bot.send_message(message.chat.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:\n' + message_text + '\n –¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞ –∑–∞ –æ–¥–∏–Ω –º2')
    elif message.text == '–ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü—É–∏–π üö®':
        sale_mes(message)
    elif message.text == 'C–∞–π—Ç Pro Service':
        site(message)
    elif message.text == '–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º':
        technical_support(message)
    elif message.text == '–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è?':
        try:
            with open('company.txt', 'r', encoding='utf-8') as f:
                company_article = f.read()
                if not company_article:
                    bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π!')
                else:
                    bot.send_message(message.chat.id, company_article)
        except FileNotFoundError:
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π!')
    elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏':
        try:
            with open('info.txt', 'r', encoding='utf-8') as f:
                info_article = f.read()
                if not info_article:
                    bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π!')
                else:
                    bot.send_message(message.chat.id, info_article)
        except FileNotFoundError:
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π!')
    elif message.text == '–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup()
        btnsite = types.KeyboardButton('–û –∫–æ–º–ø–∞–Ω–∏–∏')
        markup.row(btnsite)
        btnprs = types.KeyboardButton('–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏ üóí')
        markup.row(btnprs)
        btnstatus = types.KeyboardButton('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
        markup.row(btnstatus)
        btnsrc = types.KeyboardButton('–ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü—É–∏–π üö®')
        markup.row(btnsrc)
        btn_support = types.KeyboardButton('–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º')
        markup.row(btn_support)
        bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markup)
    elif message.text == '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–º–ø–∞–Ω–∏–∏ Pro Service –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥':
        site_portfolio(message)
    elif message.text == '–ù–∞—à–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã':
        send_multiple_photos(message)
    elif message.text == '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞' or message.text == '–ü—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑':
        msg = bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞.')
        bot.register_next_step_handler(msg, find_demand)





    else:
        bot.send_message(message.chat.id, 'I dont know!')


bot.polling(none_stop=True)

# # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
# if __name__ == '__main__':
#     while True:
#         # –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ—Ç–∞ ‚Äî –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#         try:
#             bot.polling(none_stop=True, interval=0)
#         # –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø—Ä–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
#         except Exception as e:
#             print('‚ùå‚ùå‚ùå‚ùå‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ! ‚ùå‚ùå‚ùå‚ùå‚ùå')
